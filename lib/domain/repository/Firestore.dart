// ignore_for_file: avoid_printimport 'package:cloud_firestore/cloud_firestore.dart';import 'package:contactapp_flutter/data/common/AuthData.dart';import '../../common/Contact.dart';class FirestoreService {  static final CollectionReference _usersCollection =      FirebaseFirestore.instance.collection('users');  static Future<void> registerUser(AuthData data) async {    await _usersCollection.doc(data.login).set({      'login': data.login,      'password': data.password,    });  }  static Future<bool> loginUser(AuthData data) async {    var doc = await _usersCollection.doc(data.login).get();    if (doc.exists) {      return doc['password'] == data.password;    }    return false;  }  static Future<void> addContactForUser(      String username, ContactData contactData) async {    try {      if (contactData.id.isEmpty) {        print('id empty');        contactData.id =            FirebaseFirestore.instance.collection('users').doc().id;      }      CollectionReference contactsCollection = FirebaseFirestore.instance          .collection('users')          .doc(username)          .collection('contacts');      await contactsCollection.doc(contactData.id).set(contactData.toJson());    } catch (e) {      print('error : $e');    }  }  static Future<List<ContactData>> getUserContacts(String username) async {    try {      print('contacts user of : $username');      List<ContactData> contacts = [];      QuerySnapshot snapshot = await FirebaseFirestore.instance          .collection('users')          .doc(username)          .collection('contacts')          .get();      contacts = snapshot.docs.map((doc) {        return ContactData.fromJson(doc.data() as Map<String, dynamic>, doc.id);      }).toList();      print('Fetched ${contacts.length} contacts');      return contacts;    } catch (e) {      print('Unknown: $e');      return [];    }  }  static Future<void> deleteContactForUser(      String username, String contactId) async {    try {      DocumentReference contactRef =          _usersCollection.doc(username).collection('contacts').doc(contactId);      await contactRef.delete();      print("Success delete");    } catch (e) {      print("error delete: $e");    }  }  static Stream<List<ContactData>> streamUserContacts(String userId) {    return FirebaseFirestore.instance        .collection('users')        .doc(userId)        .collection('contacts')        .snapshots()        .map((QuerySnapshot query) {      List<ContactData> contacts = [];      for (var doc in query.docs) {        contacts.add(            ContactData.fromJson(doc.data() as Map<String, dynamic>, doc.id));      }      return contacts;    });  }  static Future<void> editContactForUser(      String userId, ContactData contactData) async {    try {      print('Attempting edit: ${contactData.id} user: $userId');      DocumentReference contactRef = _usersCollection          .doc(userId)          .collection('contacts')          .doc(contactData.id);      await contactRef.update(contactData.toJson());      print("updated");    } catch (e) {      print("error: $e");    }  }}